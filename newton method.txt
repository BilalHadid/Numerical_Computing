import numpy as np

def f(x):
    return np.cos(x) - 1.3*x

def df(x):
    return -np.sin(x) - 1.3
#assign initial value to x
x = 1
#compute 'h' by assign f(x)/df(x)
h = (f(x)/df(x))
count = 0
while np.abs(h) >= 0.0001:
    #compute 'h' by assign f(x)/df(x)
    h = (f(x)/df(x)) 
    #update value of x
    x = x-h
    count = count + 1
    
        
        
    
print(x)
print('no of iterations are',count)


#ek ye tariqa h and below one is done with imported system is m 
derivative khud ba khud nikal aye ga.

import numpy as np
from scipy.misc import derivative

def f(x):
    return x*np.cos(x) - 2*(x**2) + (3*x) - 1

#def df(x):
    #return np.cos(x)-(x*np.sin(x))-(4*x)+(3*x)

x = 2
h = f(x)/derivative(f,x)
count = 0

while np.abs(h) >= 0.01:
    #compute 'h' by assign f(x)/df(x)
    h = f(x)/derivative(f,x) 
    #update value of x
    x = x-h
    count = count + 1
    
        
        
    
print(x)
print('no of iterations are',count)
